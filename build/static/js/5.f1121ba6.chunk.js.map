{
  "version": 3,
  "sources": [
    "components/Order/Order.module.css",
    "components/Order/Order.js",
    "containers/Orders/Orders.js"
  ],
  "names": [
    "module",
    "exports",
    "order",
    "props",
    "ingredients",
    "ingredientName",
    "push",
    "name",
    "amount",
    "ingredientsOutput",
    "map",
    "ig",
    "style",
    "textTransform",
    "display",
    "margin",
    "border",
    "padding",
    "className",
    "classes",
    "Order",
    "Number",
    "parseFloat",
    "price",
    "toFixed",
    "Orders",
    "this",
    "onFetchOrders",
    "token",
    "userId",
    "orders",
    "Spinner",
    "loading",
    "id",
    "Component",
    "connect",
    "state",
    "auth",
    "dispatch",
    "actions",
    "withErrorHandler",
    "axios"
  ],
  "mappings": "yFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,wGC8BXC,EA5BD,SAACC,GAGX,IAAMC,EAAc,GACpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KAAK,CACbC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAGlC,IAAMI,EAAoBL,EAAYM,KAAI,SAAAC,GAEtC,OAAO,uBAAoBC,MAAO,CAACC,cAAe,aAAcC,QAAS,eAAgBC,OAAQ,QAASC,OAAQ,iBAAkBC,QAAS,OAAtI,UACFN,EAAGJ,KADD,KACSI,EAAGH,OADZ,MAAWG,EAAGJ,SAKzB,OACI,sBAAKW,UAAWC,IAAQC,MAAxB,UACI,8CAAiBX,KAIjB,wCAAU,0CAAaY,OAAOC,WAAWnB,EAAMoB,OAAOC,QAAQ,a,wCClBpEC,E,kLAIEC,KAAKvB,MAAMwB,cAAcD,KAAKvB,MAAMyB,MAAOF,KAAKvB,MAAM0B,U,+BAItD,IAAIC,EAAS,cAACC,EAAA,EAAD,IAQb,OAPKL,KAAKvB,MAAM6B,UACZF,EACIJ,KAAKvB,MAAM2B,OAAOpB,KAAI,SAAAR,GAAK,OACtB,cAACkB,EAAD,CACOhB,YAAaF,EAAME,YACnBmB,MAAOrB,EAAMqB,OAFRrB,EAAM+B,QAK3B,8BACKH,Q,GAlBII,aA0CNC,uBAjBS,SAAAC,GACpB,MAAO,CACHN,OAAQM,EAAMlC,MAAMA,MACpB8B,QAASI,EAAMlC,MAAM8B,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,WAIA,SAAAS,GACvB,MAAO,CACHX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,QAM/DM,CAA6CK,YAAiBf,EAAQgB",
  "file": "static/js/5.f1121ba6.chunk.js",
  "sourcesContent": [
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1u50F\"};",
    "import React from \"react\";\r\nimport classes from './Order.module.css';\r\n\r\nconst order = (props) => {\r\n    /*Here I'll add ingredients which should be an ingredients array and we had the logic for transforming this before. In the 'Burger' component but lets do it now this way.\r\n       I want to push a javascript object though where I of course also have the amount but before storing the amount, I also want to store the name of the ingredient */\r\n    const ingredients = [];\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push({\r\n            name: ingredientName,\r\n            amount: props.ingredients[ingredientName]\r\n        });\r\n    }\r\n    const ingredientsOutput = ingredients.map(ig => {\r\n        /*Now regarding the key, I actually can use the ingredient name({ig.name}) as the key as it is unique here*/\r\n        return <span key={ig.name} style={{textTransform: 'capitalize', display: 'inline-block', margin: '0 8px', border: '1px solid #ccc', padding: '5px'}}>\r\n            {ig.name} ({ig.amount})\r\n        </span>;\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>Ingredients: {ingredientsOutput}</p>\r\n            {/*We also see that back here we want to use price.toFixed with 2 decimal places, this will only work on a number though and by default this is a string. So what I can do\r\n    is I can simply call 'Number.parseFloat()' to convert a string to a number or of course you add a plus sign at the point of time you're passing it there in the 'Orders' component\r\n    adding a plus(+) in front of 'order.price' should also do the trick,*/}\r\n            <p>Price: <strong>USD {Number.parseFloat(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default order;",
    "import React, {Component} from \"react\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nclass Orders extends Component {\r\n    /*I will implement 'componentDidMount'. I can use 'componentDidMount' here because I only want to fetch orders when this is loaded, there is no way we will go there\r\n with out remounting it. So 'componentDidUpdate' is not what I'm looking for, so 'componentDidMount' is what I need.*/\r\n    componentDidMount() {\r\n        this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner/>;\r\n        if (!this.props.loading) {\r\n            orders =\r\n                this.props.orders.map(order =>\r\n                    (<Order key={order.id}\r\n                            ingredients={order.ingredients}\r\n                            price={order.price}/>))\r\n        }\r\n        return (\r\n            <div>\r\n                {orders}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.order,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    }\r\n};\r\n\r\n/*I of course also want to handle any potential errors so I'll import my own higher order component, 'withErrorHandler'.\r\n Of course, let's also pass 'axios' here, otherwise this won't work */\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));"
  ],
  "sourceRoot": ""
}