{
  "version": 3,
  "sources": [
    "components/UI/Input/Input.module.css",
    "containers/Auth/Auth.module.css",
    "containers/Auth/Auth.js",
    "components/UI/Input/Input.js"
  ],
  "names": [
    "module",
    "exports",
    "Auth",
    "state",
    "controls",
    "email",
    "elementType",
    "elementConfig",
    "type",
    "placeholder",
    "value",
    "validation",
    "required",
    "isEmail",
    "valid",
    "touched",
    "password",
    "minLength",
    "isSignup",
    "inputChangedHandler",
    "event",
    "controlName",
    "updatedControls",
    "updateObject",
    "target",
    "checkValidity",
    "setState",
    "submitHandler",
    "preventDefault",
    "props",
    "onAuth",
    "switchAuthModeHandler",
    "prevState",
    "this",
    "buildingBurger",
    "authRedirectPath",
    "onSetRedirectPath",
    "formElementsArray",
    "key",
    "push",
    "id",
    "config",
    "form",
    "map",
    "formElement",
    "invalid",
    "shouldValidate",
    "changed",
    "loading",
    "errorMessage",
    "error",
    "message",
    "authRedirect",
    "isAuthenticated",
    "to",
    "className",
    "classes",
    "onSubmit",
    "btnType",
    "clicked",
    "Component",
    "connect",
    "auth",
    "token",
    "burgerBuilder",
    "building",
    "dispatch",
    "isSignUp",
    "actions",
    "action",
    "input",
    "inputElement",
    "inputClasses",
    "InputElement",
    "Invalid",
    "join",
    "onChange",
    "options",
    "option",
    "displayValue",
    "Input",
    "Label",
    "label"
  ],
  "mappings": "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",
  "file": "static/js/4.1d1156f0.chunk.js",
  "sourcesContent": [
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1priY\",\"Label\":\"Input_Label__-BPFS\",\"InputElement\":\"Input_InputElement__bzdjc\",\"Invalid\":\"Input_Invalid__3Eyof\"};",
    "// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3E2Y-\"};",
    "import React, {Component} from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport classes from \"./Auth.module.css\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport {connect} from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport * as action from \"../../store/actions\";\r\nimport {updateObject, checkValidity} from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        /*This means we're trying to redirect to checkout even though we're not building a burger. In this case I want to call on 'setAuthRedirectPath'\r\n        and I don't need to pass an argument here because we already set this up to always pass '/' at the bottom of our component to the action creator here*/\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            /*So now we reset the path whenever we reach the auth page without building a burger.*/\r\n            this.props.onSetRedirectPath('/');\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls,{\r\n            [controlName]: updateObject(this.state.controls[controlName],{\r\n                value: event.target.value,\r\n                /*there we have this 'validation' property which I'll pass, so that is referring to that 'validation' property each 'control' has where I set up the rules.*/\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControls});\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignup: !prevState.isSignup\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n\r\n        if(this.props.loading){\r\n            form =  <Spinner/>\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if(this.props.error){\r\n            errorMessage = (\r\n                /*Again this message property is only available because I'm using the 'error' as it comes back from firebase and that happens to be a javascript object which has a message property*/\r\n              <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect= <Redirect to={this.props.authRedirectPath}/>;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button clicked={this.switchAuthModeHandler} btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n/*Now on '.state', we have to access auth since this is what leads to the auth reducer in the end due to 'combinedReducers'. So we have to access' state.auth'\r\nand there now, the 'loading' property we set up in our auth reducers state,*/\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        /*Now we could receive the 'path' as an argument to this function here and pass it on or we just hard code '/' in here because if I call this action from within that component,\r\n        I always want to reset it back to its basic form.*/\r\n        onSetRedirectPath: () => dispatch(action.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);",
    "import React from \"react\";\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    /*I will add a new constant which I'll name 'inputClasses' which is an array which at the beginning is just 'classes.inputElement' */\r\n    const inputClasses = [classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    /*And now to handle the case that we also have different attributes, I expect to get the attributes you want to set on <input> as props for our <input {...props}/> wrapper. This then allows\r\n    me to simply distribute them on the <input> element, so any default html attributes you want to set on your <input>, you only need to set the input type prop and then you pass the\r\n    normal attributes you would pass to that type, so if you have a <textarea>, you simply pass the normal props you want it to pass from outside and inside of my custom <input> component,\r\n    I don't have to worry about which exact type we have. I rely on you using the wrapper correctly and passing the correct normal html attributes, this is a way of reducing the\r\n    complexity here so that I only have to set the right element and then you take care about the props.*/\r\n    switch (props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n                                  {...props.elementConfig}\r\n                                  value={props.value}\r\n                                  onChange={props.changed}/>;\r\n            break;\r\n        case('textarea'):\r\n            inputElement = <textarea className={inputClasses.join(' ')}\r\n                                     {...props.elementConfig}\r\n                                     value={props.value}\r\n                                     onChange={props.changed}/>;\r\n            break;\r\n        case('select'):\r\n            inputElement = <select\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(\r\n                    option =>(\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    )\r\n                )}\r\n                           </select>;\r\n            break;\r\n        default:\r\n            inputElement = <input className={inputClasses.join(' ')}\r\n                                  {...props.elementConfig}\r\n                                  value={props.value}\r\n                                  onChange={props.changed}/>;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\nexport default input;\r\n"
  ],
  "sourceRoot": ""
}